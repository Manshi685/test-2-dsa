Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 







/**********
 * Following is the Node class that is already written.
 
class Node{
public:
    int data;
    Node *next;
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};
 
*********/
Node*reverse(Node*head){
    Node*prev=NULL;
    Node*curr=head;
    Node*next=NULL;
    while(curr){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}

Node* NextLargeNumber(Node *head) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input is handled automatically.
     */
    head = reverse(head);
    Node *t = head;
    int carry = 1;
    while (t != NULL && carry > 0)
    {
        int x = (t->data + carry) % 10;
        carry = (t->data + carry) / 10;
        t->data = x;
        t = t->next;
    }

    head = reverse(head);
    if (carry != 0)
    {
        Node *temp = new Node(carry);
        temp->next = head;
        head = temp;
    }
    return head;
}



